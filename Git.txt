$git init
$git add filename
$git status
$git commit
$git push
$git pull
$git clone
$git log --all --decorate --oneline --graph

### before commit first time you need to execute name and email for git.
$ git config --global user.name "russel"
$ git config --global user.email "russel2005@gmail.com"
after doing this, you may fix the identity used for this commit with:
$ git commit --amend --reset-author
$ git config --list #this will show you all current config list

=========upload project to git================
> git init # create empty git repo
> git remote add origin giturl.git
> git pull origin master
> git add .
> git commit -m "add"
> git push -u origin master

=========beginning============================
> git init
> git remote -v
> git remote add origin git_url.git
> git pull origin master
> git status
> git branch frameworkdesign
> git checkout frameworkdesign
> git add .
> git commit -m "add myfile"
> git status
> git push origin master


===========Stage==============
$ git add filename # it move file into stage area.
$ git status # it will show all stage area file and unstage area file
===========Unstage============
$ git rm --cached <file>  

===========RESET master=============
> git reset --hard origin/master
> git pull origin master

===========PULL=====================
> git remote
> git remote -v # -v means verbose, it returns git url. 
if it not return the git url that means you don't have local repo connected to github. the you need to run below:
> git remote add origin gitUrl.git
>
> alias graph='git log --all --decorate --oneline --graph'
> graph

> git fetch origin   #this will update from github branch to local master branch
> git status  #now it will show how many commit is behind the local master branch from githum master branch
> graph
> git merge origin/master    #it will fast-forward, and local and github both HEAD are pointing the same.
> graph

> git pull origin master # it will combine, git fetch and git merge together
note: if your master got update then you can update your local repo with above command.

Scenario1: create branch but want to delete the branch.
=========
> git branch new-branch  #create
> git branch branch-name -D  #Delete
#to list all branches
> git branch -a
> git branch -r   #this for remote branch only
> git branch -l   # this for local branch only
> git branch --list 'my*'  #my-branch will show
#create branch and checkout in one command
> git branch -b newbranchname
or
> git checkout -b newbranchname == git branch newbranchname; git checkout newbranchname


Scenario2: delete and re-create branch
=========
> git branch branch-name -D
> git reset commit --hard or git reset --hard HEAD
> git branch new-branch
> git pull
or:
Delete all the files. Leave just the .git directory.
> git reset --hard HEAD
> git pull
> git push


Scenario3: update your local branch and check the difference with the remote branch.
==========
#go to the branch you want to check difference
> git checkout branch_name
> git fetch --all    #update your local
> git branch  or > git status    # to check which branch you are in
> git diff my-local-branch remotes/origin/master    #two different branch
> git diff master origin/master or > git diff featureA origin/next   #different local master vs remote master branch 
> git diff --name-status remote-branch local-branch   # different just the file name in the branches

Scenario4: create a localbranch and commit then merge into local-master branch
==========
> git branch localbranch  # create branch
> git checkout localbranch
> git add file.py
> git commit -m "msg"
> git checkout master
> git pull     # update master with latest code from remote master branch
> git merge localbranch  # it says that lacalbranch merge into master branch, because merge ran from master-branch

Scenario5-a: Merge fast-forward then delete branch
==========
create and checkout SDN, add file and commit #here SDN is local branch
create and checkout Auth, add file and commit #here Auth is local branch
> git checkout master
> git diff master..SDN  # check the diff from local SDN branch to local master branch.
> git merge SDN # now HEAD point to master and SDN
> git branch --merged  # it shows that master branch merge to SDN branch
> git branch -d SDN

Scenario5-b: Merge 3-Way  when branch HEAD is previous master branch commit. and master updated and merge with other branch.
==========
> git status
> git merge auth
> git branch --merged
> git branch -d auth

***Scenario5-c: Merge with --squash
============
when your master branch get updated and your local brach has multiple commit. so --squash will do merge all feature branch commit to 
a single commit(put together) then with the latest commit in master branch.
> git chechout master
> git merge --squash feature
> git commit -m "feature and master merged"

***Scenarios5-d: REBASE
=============

> git checkout feature
> git rebase master  # here update master from latest commit and feature branch moved and pointing to last master commit.
> git rebase feature


Scenario6: force “git pull” to overwrite local files?
=========
> git fetch --all  or > git fetch origin master
> git reset --hard origin/master
# maintain current local commits by creating a branch form master before resetting.
> git checkout master
> git branch new-branch-to-save-current-commits
> git fetch --all
> git reset --hard origin/master

Scenario07: Undoing Bad commits
==========
> git log
 commit hascode1
 commit hascode2
 commit hascode3 #if you want to delete recent two commit
 
> git reset --soft Hashcode3
> git log --oneline

Scenario08: Combining Git commits with squash 
===========
# master>localbranch: commit1, commit2, commit3 wanted to combine 3 commits to big single commit.
> git checkout localbranch
> git rebase -i HEAD~3
-------------------
pick 45uwoier84 commit1
pick fsdf8y9y9f commit2
pick dkfjs9dfuo commit3

# Rebase 0920u234..dkfjs9dfuo onto 0920u234 ( 3 commands)
........
........
-------------------
press: i for insert/edit
change last two commit to pick>squash
-------------------
pick 45uwoier84 commit1
squash fsdf8y9y9f commit2
squash dkfjs9dfuo commit3

# Rebase 0920u234..dkfjs9dfuo onto 0920u234 ( 3 commands)
........
........
-------------------
Press: Esc+:+ wq
Press i
it will open the another file and put # or comments out the last commit msg
Press: Esc+:+ wq
> git log --oneline  # now you will see all three commits combined in single commit.

Scenario09: Git workflow with Rebase
==========
> git branch -b QA
> git add index.html
> git commit -m "commit1"
> git checkout master
> git pull  # update master from latest code/ or last commit
> git checkout QA
> git rebase master
> git checkout master
> git rebase QA
> git push


Scenario10: Git workflow with Merge
===========
> git status # its checkout QA branch
> git checkout master #switch to master
> git diff master..QA
> git merge QA   # it should run from master branch and after run showing HEAD -> master, QA
Note: now QA branch point to master branch, so we don't need  two branch pointing to same commit. we can delete QA branch

deleting QA branch: before running the delete branch command check which branch merged
> git branch --merged
QA
* master
> git push
> git branch -d QA  # if you have another branch then it will throw an error
> git branch -D QA  # this will delete unmerged branch
> git pull


Scenario11: Git STASH 
===========
> git checkout master
#modify anyfile 
> git status # on master branch, changes not staged for commit: showing red on file name
> git checkout stage  # ERROR showing: please commit your changes or stash them before you switch branches.
> git stash # saved working directory
> git status # on master branch> nothing to commit, working tree clean
> git stash list #showing stash@{0}: WIP on master, if we have multiple times "$git stash" it will show multiple
> git stash list -p # showing each line modified of that edited file
> git stash apply # changes not staged for commit:
> git diff
> git commit -a -m "commit"
> git stash list # it still showing we have stash list, we can use as needed.
> git stash save "better commit msg or combine one or multiple stash msg"
> git stash list # will show multiple stash



Scenario012: create git alias command
=============
> alias graph="git log --all --decorate --oneline --graph"
> graph


Scenairo13: Detached HEAD
===========
> git checkout er234rw324 >previous_commit_hascode
> graph  # alias graph="git log --all --decorate --oneline --graph"
> git branch stage
> graph  # showing > HEAD, stage> HEAD is pointing to stage branch
> git checkout stage # switch to stage branch
> graph  # HEAD -> stage


Scenario13: git restore with origin master, changes will be destroyed
===========
> git reset filenm
1) goto project folder and enter
$ git init
Note: .git hidden file will be created.

2) push an existing repository from the command line
$git remote add origin gitURL.git
note: now it registared with git repository

3) $git status
it will show all files which is not in repository added yet.

4) $git add .  or $git add filename or git add -A
it will add all files, complete project.

5)$ git commit -m "commit comments"
5)$ git commit -a -m "commit msg"  # it equal to two command> git add file; git commit -m "commit msg"



### origin is the repository name
$ git remote -v
output:
origin https://github.com/russel2005/SDET.git (fetch)
origin https://github.com/russel2005/SDET.git (puch)

git
6) push the code now after commit.
$git push origin master  or $ git push -u origin master 
note: here master is the brunch name,
note: remember before push the code you need to add the permission with ssh key, other wise it will
show permission denied msg.

How to create SSH Key ?
1) goto account>settings> select "SSH and GPG keys">New SSH Key
2) enter title for SSH key name,
3) enter SSH Key
	a) how to get the SSH Key?
	url: https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh
4) click add ssh key
5) repeat the above push command and it will not showing permission denied error.


======================
how to clone or copy repository from Github in local folder
1) create a folder and go to that folder by command prompt
2)use git clone command from current folder
$ git clone gitURL

how to open clone project in eclipse?
file>import>general>existing projects>select root project directory>open>
makesure select your project under project>finish.

if gitrepository update any code of file then we need to use PULL request to get latest code from GITHUB.
7) $git pull origin master.
note: it will be copy latest code in current project from master brunch.
======================
Update your local git repo:
>git fetch --all

Build a local branch and checkout on it:
>git branch pouet && git checkout pouet

Apply the commit you want on this 
>git cherry-pick abcdefabcdef
======================

How to work with Git and GitHub in Eclipse?
1)commit
2)push
3)pull
4)Branching
5)Raising pull request(PR)
6)Approve pull request(PR)
7)Merging


============remove folder and file===============
The rm -r command will recursively remove your folder:
> git rm -r folder-name
or
> git rm filename.java

